# -*- coding: utf-8 -*-
"""Solution Final copy of RLO_Group4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19bo8rWtfbkVHT4ecXRnCLeSrARIQyDM7

# Introduction

####In this exercise, you will build the Password Game as shown [here](https://https://neal.fun/password-game/). Take a minute to familiarize yourself with the game to understand how it works. Rather than building the entire game from scratch, you will write some logic in Python to determine whether a password is **valid** or **invalid** based on each constraint. For example, if the constraint is that a valid password is at least 8 characters long, you will write `Boolean` logic that evaluates to True if the password meets this constraint (the length is `>= 8`) or False if the password does not meet this constraint (the length is `< 8`).

####For each password constraint, we have created a separate function. This will help make your code **modular**. Writing **modular** code is an important practice because it makes the program more organized, easier to read, and easier to debug.

####Notice that each function takes as input a string called `password` and returns a `Boolean` value based on whether the `password` is valid (True) or invalid (False). Take a look at the following function which checks whether a password has a length of at least 8

###**Function 1** : This function checks whether the length of the password is at least 8.

Run the following cell
"""

def check_length(password):
  # Checks if the length of the password is greater than 8 and returns True or False depending on the result
  #=================================================================
  # Example code
  if(len(password)>=8):
    return True
  else:
    return False
  #=================================================================

"""#### **Unit Testing**
Another important aspect of programming is **unit testing**. The purpose of testing a program is to ensure that your code does what you intend. If you want to test a specific piece of your program, you will need to write some **unit tests**. When you run these tests, they run a "unit" of your program and compare its output with an expected output. This is exactly how the Autograder works on Gradescope. However, unit tests are not just used for grading purposes. They are incredibly valuable for evaluating and understanding your own program. They also help to identify bugs and prevent errors from happening in the future.

In this activity, you will have the chance to write your own **unit tests**. Specifically, you will test each function, which is its own "unit" of code. For each function that you test, you want to evaluate your function for different inputs and outputs. For example, you might want to make sure that a password with 10 characters gives the correct output of `True`. Similarly, you might want to check that a password with 3 characters gives the output of `False`. Each of these conditions that you want to evaluate is referred to as a **test case**. Each test case will **pass** if your program satisfies the expected condition and **fail** otherwise. Take a look at the following **test cases** for the function above, and run the following cell:
"""

# This cell should not be modified.
questions = {f"{x}.{y}": "0" for x in range(1, 7) for y in range(1,10)}

# Some setup
def run_test_case(expected, actual, id):
  print(f"Expected: {expected}, Got : {actual}")
  outcome = "passed" if expected == actual else "failed"
  ct = 1 if outcome == "passed" else 0
  questions[id] = f"{questions[id]},{ct}"
  print(f"Test {id} {outcome}")


## Example Test Cases
# Case 1:
#=================================================================
valid_password = 'valid_password' # This has >= 8 characters
#=================================================================
run_test_case(True, check_length(valid_password), '1.1')

# Case 2:
#=================================================================
invalid_password = 'invalid' # This has < 8 characters
#=================================================================
run_test_case(False, check_length(invalid_password), '1.2')

"""###**Function 2**: This function should check whether the password contains a numerical digit (0,1,2,3,4,5,6,7,8,9)
Fill in the function below (which should return a Boolean value)

When you're finished, run the cell to save your work
"""

def check_digit(password):
  #=================================================================
  for c in password:
    if c.isdigit():
      return True
  return False
  #=================================================================

"""We have provided some example tests cases below. Run the next cell to check your code"""

# Example Test Cases
# Case 1:
#=================================================================
valid_password = 'yaydigits123' # Contains a numerical digit
#=================================================================
run_test_case(True, check_digit(valid_password), '2.1')
# Case 2:
#=================================================================
invalid_password = 'nodigits' # Doesn't contain a numerical digit
#=================================================================
run_test_case(False, check_digit(invalid_password), '2.2')

"""To become familiar with writing your own **unit tests**, try creating some test cases on your own. Replace the empty strings (`''`) with some example passwords that you would expect to evaluate to True and False. After that, run the cell to evaluate the test cases."""

#=================================================================
valid_password = 'digits1' # Write your own test case that evaluates to True
invalid_password = 'withoutdigits' # Write your own test case that evaluates to False
#=================================================================
run_test_case(expected=True, actual=check_digit(valid_password), id='2.3')
run_test_case(expected=False, actual=check_digit(invalid_password), id='2.4')

"""###**Function 3** : This function should check that the password contains at least one uppercase letter.

Fill in the function below, and run the cell when you're finished
"""

def check_uppercase(password):
  #=================================================================
  for c in password:
    if c.isupper():
      return True
  return False
  #=================================================================

# Test Cases
valid_password = 'vAlIDPaSsworD'
invalid_password = 'invalid_password'
run_test_case(expected=True, actual=check_uppercase(valid_password), id='3.1')
run_test_case(expected=False, actual=check_uppercase(invalid_password), id='3.2')

"""Try writing some of your own test cases (just assign strings to `valid_password` and `invalid_password` evaluate to True and False, respectively). Then, run the cell when you're finished"""

#=================================================================
valid_password = 'vaLid' # Write your own test case that evaluates to True
invalid_password = 'invalid' # Write your own test case that evaluates to False
#=================================================================
run_test_case(expected=True, actual=check_uppercase(valid_password), id='3.3')
run_test_case(expected=False, actual=check_uppercase(invalid_password), id='3.4')

"""###**Function 4** : This function checks weather all digits in the password sum upto 25. Again note the difference between numbers and digits.

Fill in the function below, and run the cell when you're finished
"""

def check_sum(password):
  #=================================================================
  s = 0
  for p in password:
    if(p.isdigit()):
      s+=int(p)
  if(s==25):
    return True
  return False

  #=================================================================

#Test Cases
#Case 1:
valid_password = 'CS119 class starts from 9:05am'
#Case 2:
invalid_password = 'CS119 class starts from 10:00am'

run_test_case(expected=True, actual=check_sum(valid_password), id='4.1')
run_test_case(expected=False, actual=check_sum(invalid_password), id='4.2')

"""Try writing some of your own test cases (just assign strings to valid_password and invalid_password evaluate to True and False, respectively). Then, run the cell when you're finished"""

#=================================================================
valid_password = '55555' # Write your own test case that evaluates to True
invalid_password = '5555' # Write your own test case that evaluates to False
#=================================================================
run_test_case(expected=True, actual=check_sum(valid_password), id='4.3')
run_test_case(expected=False, actual=check_sum(invalid_password), id='4.4')

"""###**Function 5** : This function checks whether the password has only even numbers. Note that we differentiate between digits and number. For example in the password "test12test5test", the numbers are '12' and '5', while the digits are '1', '2' and '5'.

The following function has been filled for you and the test cases are provided. Does this mean that the function gives the intended output for each possible input? Does passing a given test case mean that the function returns the intended value for all possible inputs? Try playing around by trying different test cases to see if this always works.
"""

def check_even_numbers(password):
  #=================================================================
  for character in password: #extract a character from password
    if(character.isdigit()): #check if the character is an integer
      if int(character)%2!=0: #if the character is an integer then check if it is divisible by 2
        return False
  return True
  #=================================================================

#Test Cases
#Case 1:
valid_password = 'Iate2burgersand4fries'
#Case 2:
invalid_password = 'Ihave1burgerand5fries'

run_test_case(expected=True, actual=check_even_numbers(valid_password), id='5.1')
run_test_case(expected=False, actual=check_even_numbers(invalid_password), id='5.2')

"""The answer to the above question is no!. A test-case may not be general enough to cover all possible edge cases and boundary condition. As an example, consider the following test-case for the above function."""

valid_password = '2dollarsand4cents'
run_test_case(expected=True, actual=check_even_numbers(valid_password), id='5.3')
valid_password = '2kittensattacked2humans'
run_test_case(expected=True, actual=check_even_numbers(valid_password), id='5.4')
valid_password = 'its16minutespast2'
run_test_case(expected=True, actual=check_even_numbers(valid_password), id='5.5')
valid_password = 'Ihave32pagesofreading'
run_test_case(expected=True, actual=check_even_numbers(valid_password), id='5.6')

"""All the above test cases should have passed but the function fails to return the correct value for the latter 2. Do you notice any pattern and figure out the mistake in your function?

The reason why the last 2 tests fail is because the function cannot handle password with consecutive digits (remember how we defined a number). We need to modify our function to not just be able to extract digits and check whether they are even, but if there are consecutive digits in the password it should treat them as a single number and check for evenness.

This constitutes a very important lesson on designing test cases to check your functions. You should think of all possible combinations and edge cases for inputs where you function can fail and check against it. Try correcting our function now to handle consecutive digits. Hint : to do this you can use the findall function in the re library.
"""

import re

def check_even_numbers_corrected(password):
  #=================================================================
  numbers = re.findall(r'\d+', password) # Extract all consecutive digits as numbers

  for num in numbers:
    if int(num)%2!=0: # Check if each extracted number is even
      return False

  return True if len(numbers) > 0 else False
  #=================================================================

#lets check the function using the previously failed tests
valid_password = 'its16minutespast2'
run_test_case(expected=True, actual=check_even_numbers_corrected(valid_password), id='5.5')
valid_password = 'Ihave32pagesofreading'
run_test_case(expected=True, actual=check_even_numbers_corrected(valid_password), id='5.6')

"""Both the numbers in the password, 2 and 12 are even and yet the test fails - the function returns the wrong output!

Try writing some of your own test cases (just assign strings to valid_password and invalid_password evaluate to True and False, respectively). Then, run the cell when you're finished
"""

#=================================================================
valid_password = '' # Write your own test case that evaluates to True
invalid_password = '' # Write your own test case that evaluates to False
#=================================================================
run_test_case(expected=True, actual=check_even_numbers_corrected(valid_password), id='5.3')
run_test_case(expected=False, actual=check_even_numbers_corrected(invalid_password), id='5.4')

"""### **Bonus**
###**Function 6** : This function must check that the password contains today's day of the week e.g Monday, Tuesday etc. You can use the [weekday](https://www.geeksforgeeks.org/weekday-function-of-datetime-date-class-in-python/) method from the [datetime](https://docs.python.org/3/library/datetime.html) library.

Fill in the function below, and run the cell when you're finished
"""

def check_day_of_week(password):
  #=================================================================
  return # Your code here
  #=================================================================

#Test Cases
#Case 1:
valid_password = 'IloveSundays'
#Case 2:
invalid_password = 'Iloveeveryday'

run_test_case(expected=True, actual=check_day_of_week(valid_password), id='6.1')
run_test_case(expected=False, actual=check_day_of_week(invalid_password), id='6.2')

"""Try writing some of your own test cases (just assign strings to valid_password and invalid_password evaluate to True and False, respectively). Then, run the cell when you're finished"""

#=================================================================
valid_password = '' # Write your own test case that evaluates to True
invalid_password = '' # Write your own test case that evaluates to False
#=================================================================
run_test_case(expected=True, actual=check_day_of_week(valid_password), id='6.3')
run_test_case(expected=False, actual=check_day_of_week(invalid_password), id='6.4')

"""#### **Feedback**
How was your experience? To record your attendance and provide feedback on what you learned today, please fill out the following Google form.
"""

# -*- coding: utf-8 -*-
'''!pip install selenium

!apt-get update

!apt-get install -y chromium-browser

!apt install chromium-chromedriver

!ls /usr/lib/chromium-browser/chromedriver

#Record responses
google_form = "https://docs.google.com/forms/d/e/1FAIpQLSfcnOZuMmF-I4qpWFXxe_hTQMTzuVSqZbWvcmMxZGSCsRiHMw/viewform"


# Please fill in the feedback about this RLO project
umass_email_id = "solutions final copy"
assert umass_email_id != ""
# feedback = "Can work without errors!!"
# assert feedback != ""

#run this cell after completeing all above responses

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys



options = webdriver.ChromeOptions()
options.add_argument("-incognito")
options.add_argument('--no-sandbox')
options.add_argument('--headless')
options.add_argument('--disable-gpu')
options.add_argument('--disable-dve-shm-usage')

# executable path for chromedriver
service = Service(executable_path='/usr/lib/chromium-browser/chromedriver.exe')

driver = webdriver.Chrome(options=options)

response_history = ""
for id in questions.keys() :
  response_history = f"{response_history}\n{id},{questions[id]}"


X_path_map = {
    "feedback" : '//*[@id="mG61Hd"]/div[2]/div/div[2]/div[1]/div/div/div[2]/div/div[1]/div[2]/textarea',
    "response" : '//*[@id="mG61Hd"]/div[2]/div/div[2]/div[2]/div/div/div[2]/div/div[1]/div[2]/textarea',
    "email" : '//*[@id="mG61Hd"]/div[2]/div/div[2]/div[3]/div/div/div[2]/div/div[1]/div/div[1]/input',
    "button" : '//*[@id="mG61Hd"]/div[2]/div/div[3]/div[1]/div[1]/div/span/span'

}


# access the Google Form
driver.get(google_form)
# driver.switch_to.frame(0)
# Xpath for response cell
response_cell = driver.find_element(By.XPATH, X_path_map["response"])
# enter data from Excel file from corresponding column
response_cell.send_keys(f"{response_history}")

# Xpath for email cell
email_cell = driver.find_element(By.XPATH, X_path_map['email'])
# enter data from Excel file from corresponding column
email_cell.send_keys(f"{umass_email_id}")


# # Xpath for feedback cell
# feedback_cell = driver.find_element(By.XPATH, X_path_map['feedback'])
# # enter data from Excel file from corresponding column
# feedback_cell.send_keys(feedback)

# Xpath for submit button
button = driver.find_element(By.XPATH, X_path_map['button'])
# click on submit button
button.click()'''